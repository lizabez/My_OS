#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>

#define MAX_THREADS 64  // Максимальное количество потоков

// Структура для хранения данных каждого потока
typedef struct {
    int num_throws;        // Количество бросков для каждого игрока
    int current_round;     // Текущий тур
    int player1_score;     // Очки первого игрока
    int player2_score;     // Очки второго игрока
    int num_experiments;   // Количество экспериментов
    int thread_id;         // Идентификатор потока
    int* results;          // Массив для записи результатов (побед игрока 1 или 2)
} thread_data_t;

// Функция для генерации случайного броска кости
int roll_die() {
    return rand() % 6 + 1;  // Возвращаем случайное число от 1 до 6
}

// Функция, выполняющая один эксперимент игры
void* run_game(void* arg) {
    thread_data_t* data = (thread_data_t*) arg;
    int player1_total_score = data->player1_score;
    int player2_total_score = data->player2_score;
    
    // Моделируем броски костей для каждого игрока
    for (int i = 0; i < data->num_throws; ++i) {
        player1_total_score += roll_die() + roll_die();  // Игрок 1 бросает 2 кости
        player2_total_score += roll_die() + roll_die();  // Игрок 2 бросает 2 кости
    }
    
    // Определяем победителя
    if (player1_total_score > player2_total_score) {
        data->results[data->thread_id] = 1;  // Победа игрока 1
    } else if (player1_total_score < player2_total_score) {
        data->results[data->thread_id] = 2;  // Победа игрока 2
    } else {
        data->results[data->thread_id] = 0;  // Ничья
    }

    return NULL;
}

// Главная функция программы
int main(int argc, char* argv[]) {
    if (argc != 5) {
        printf("Usage: %s <num_throws> <current_round> <player1_score> <num_experiments>\n", argv[0]);
        return 1;
    }

    int num_throws = atoi(argv[1]);       // Количество бросков
    int current_round = atoi(argv[2]);    // Текущий тур
    int player1_score = atoi(argv[3]);    // Начальные очки игрока 1
    int num_experiments = atoi(argv[4]);  // Количество экспериментов
    int num_threads = 4;                  // Количество потоков, можно ограничить через аргумент

    // Ограничиваем количество потоков
    if (num_threads > MAX_THREADS) {
        num_threads = MAX_THREADS;
    }

    // Массив для хранения результатов каждого потока
    int* results = (int*) malloc(num_experiments * sizeof(int));
    pthread_t threads[num_threads];
    thread_data_t thread_data[num_threads];

    srand(time(NULL));  // Инициализация генератора случайных чисел

    // Запуск экспериментов
    int experiments_per_thread = num_experiments / num_threads;
    for (int t = 0; t < num_threads; ++t) {
        thread_data[t].num_throws = num_throws;
        thread_data[t].current_round = current_round;
        thread_data[t].player1_score = player1_score;
        thread_data[t].player2_score = player1_score;  // Используем одинаковое начальное количество очков
        thread_data[t].num_experiments = experiments_per_thread;
        thread_data[t].thread_id = t;
        thread_data[t].results = results;
        
        pthread_create(&threads[t], NULL, run_game, (void*) &thread_data[t]);
    }

    // Ожидание завершения всех потоков
    for (int t = 0; t < num_threads; ++t) {
        pthread_join(threads[t], NULL);
    }

    // Подсчитываем победы
    int player1_wins = 0, player2_wins = 0, draws = 0;
    for (int i = 0; i < num_experiments; ++i) {
        if (results[i] == 1) {
            player1_wins++;
        } else if (results[i] == 2) {
            player2_wins++;
        } else {
            draws++;
        }
    }

    // Выводим результаты
    printf("Results after %d experiments:\n", num_experiments);
    printf("Player 1 wins: %d\n", player1_wins);
    printf("Player 2 wins: %d\n", player2_wins);
    printf("Draws: %d\n", draws);

    // Освобождаем память
    free(results);

    return 0;
}
